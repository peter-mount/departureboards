# ======================================================================
# Build departureboards.mobi
#
# The order of things within the build is important.
#
# Items that don't change much should be first so that we make use of
# the docker build cache.
#
# e.g. We run npm install early on so that we don't update every time
# a build runs, especially as this can be over 50Mb of downloads each time.
#
# The build is also broken down into three images:
# 1 builder based on the babel image contains the build tools and the dependencies
# 2 compiler handles the compilation of the application
# 3 the final image, contains httpd and the built application.
# ======================================================================

# The type of build, default is development which is faster & has all
# warnings generated by react.
#
# To build a production ready application use --build-arg environment=production
ARG environment=development

# ======================================================================
# Node JS
ARG prefix
FROM ${prefix}debian:11-slim AS base
ARG aptrepo
ARG npmrepo

# Needed post node15 otherwise npm will install at / & thats no longer permitted
WORKDIR /root

# We need ca-certificates installed first before our local apt proxy defined in the aptrepo build-arg
RUN if [ ! -z "${aptrepo}" ]; then \
        apt-get update &&\
        apt-get install -y ca-certificates &&\
        sed -i \
          -e "s|http://deb.debian.org/|${aptrepo}|" \
          -e "s|http://security.debian.org/|${aptrepo}|" \
          /etc/apt/sources.list \
    ;fi &&\
    if [ ! -z "${npmrepo}" ]; then echo registry=${npmrepo} >~/.npmrc ;fi &&\
    apt-get update &&\
    apt-get install -y ca-certificates nodejs npm &&\
    npm install npm@latest -g &&\
    chmod -R +rx /root &&\
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* ~/.npmrc

# ======================================================================
# Download NPM sources
FROM base as npm

WORKDIR /opt/build
ADD package.json package.json

RUN npm install

# ======================================================================
# Run the build
FROM npm as build
ARG environment

WORKDIR /opt/build
ADD .babelrc .babelrc
#ADD .eslintrc .eslintrc
ADD webpack.config.js webpack.config.js

ADD public public
ADD css css
ADD src src

RUN npm run build

# ======================================================================
# Apache HTTPD based image to run the app locally
FROM httpd:2.4.41-alpine as httpd

# Send all 404's to the index document.
# This is required so we can use URL based routing within the app.
RUN echo "ErrorDocument 404 /index.html" >>/usr/local/apache2/conf/httpd.conf

# Copy the distribution unto htdocs
COPY --from=build /opt/build/dist /usr/local/apache2/htdocs/
